{"version":3,"sources":["components/navbar/Navbar.module.css","pages/errorPage/ErrorPage.module.css","pages/authPages/signUp/SignUp.module.css","pages/testPage/TestPage.module.css","enums/paths/index.ts","reportWebVitals.ts","pages/authPages/checkEmail/CheckEmail.tsx","api/axiosInstance.ts","api/authApi.ts","pages/authPages/passwordRecovery/passwordRestoreMessage.ts","store/reducers/authReducer.ts","pages/authPages/logIn/LogIn.tsx","pages/authPages/newPassword/NewPassword.tsx","pages/authPages/passwordRecovery/PasswordRecovery.tsx","pages/authPages/signUp/SignUp.tsx","pages/errorPage/ErrorPage.tsx","pages/packs/DoubleRange/DoubleRange.tsx","pages/packs/Pagination/Pagination.tsx","pages/packs/Search/Search.tsx","pages/packs/Sort/Sort.tsx","pages/packs/Table/Table.tsx","pages/packs/Packs.tsx","pages/profile/Profile.tsx","pages/testPage/TestPage.tsx","app/AppRoutes.tsx","components/navbar/Navbar.tsx","app/App.tsx","store/reducers/appReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","PATHS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CheckEmail","restoreEmail","useSelector","state","auth","className","styles","title","instance","axios","create","baseURL","process","withCredentials","authAPI","payload","post","data","passwordRestoreMessage","email","from","message","initState","isRegisterSuccess","isLoggedIn","userInfo","isEmailSent","isPasswordChanged","setRegistrationSuccess","type","setIsEmailSent","setIsPasswordChanged","LogIn","dispatch","useDispatch","useState","password","rememberMe","values","setValues","to","PROFILE","onSubmit","e","loginData","preventDefault","a","response","form","htmlFor","id","value","onChange","currentTarget","autoComplete","checked","info","link","PASSWORD_RECOVERY","SIGN_UP","NewPassword","changingPasswordSuccess","params","useParams","setPassword","LOGIN","resetPasswordToken","createNewPassword","token","PasswordRecovery","setEmail","CHECK_EMAIL","restoreThroughEmail","SignUp","confirmPassword","registrationsData","ErrorPage","error","emoji","DoubleRange","min","Pagination","Search","Sort","Table","Packs","Profile","name","TestPage","elements","AppRoutes","path","HOME","element","PACKS","NEW_PASSWORD","NEW_PASSWORD_WITH_TOKEN","ERROR","TEST_PAGE","Navbar","navbar","isActive","active","App","isLoading","isInitialized","reducers","combineReducers","app","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30e16b81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__UjdbE\",\"active\":\"Navbar_active__1NE7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ErrorPage_error__2qfsS\",\"emoji\":\"ErrorPage_emoji__3NBoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SignUp_title__1Ph07\",\"form\":\"SignUp_form__t8X5o\",\"info\":\"SignUp_info__NtZEq\",\"link\":\"SignUp_link__oxnWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elements\":\"TestPage_elements__2HAji\"};","export enum PATHS {\n  HOME = '/',\n  PROFILE = '/profile',\n  PACKS = '/packs',\n  LOGIN = '/login',\n  SIGN_UP = '/signup',\n  PASSWORD_RECOVERY = '/password-recovery',\n  CHECK_EMAIL = '/password-on-email',\n  NEW_PASSWORD = '/enter-new-password',\n  NEW_PASSWORD_WITH_TOKEN = '/enter-new-password/:token',\n  TEST_PAGE = '/super-components',\n  ERROR = '/404',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useSelector } from 'react-redux';\n\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const CheckEmail = (): ReturnComponentType => {\n  const restoreEmail = useSelector<AppStoreType, string>(\n    state => state.auth.restoreEmail,\n  );\n  return (\n    <div>\n      <h3 className={styles.title}>Check Email</h3>\n      <p>We’ve sent an Email with instructions to {restoreEmail}</p>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nexport const developmentMode = false;\n\nexport const instance = axios.create({\n  baseURL: developmentMode\n    ? process.env.REACT_APP_DEVELOPMENT_MODE_BASE_URL\n    : process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './axiosInstance';\n\nexport const authAPI = {\n  registration: (payload: RegistrationData) =>\n    instance.post<RegistrationData, AxiosResponse<{ error?: string }>>(\n      '/auth/register',\n      payload,\n    ),\n  login: (payload: LoginData) =>\n    instance.post<LoginData, AxiosResponse<UsersInfoResponse>>('/auth/login', payload),\n  passwordRestore: (data: PasswordRestoreData) =>\n    instance.post<PasswordRestoreData, AxiosResponse<PasswordResponse>>(\n      'auth/forgot',\n      data,\n    ),\n  newPassword: (data: NewPasswordData) =>\n    instance.post<NewPasswordData, AxiosResponse<PasswordResponse>>(\n      'auth/set-new-password',\n      data,\n    ),\n};\n\nexport type RegistrationData = {\n  email: string;\n  password: string;\n};\nexport type LoginData = RegistrationData & { rememberMe: boolean };\nexport type UsersInfoResponse = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number;\n};\nexport type PasswordRestoreData = {\n  email: string;\n  from: string;\n  message: string;\n};\nexport type PasswordResponse = {\n  info: string;\n  error: string;\n};\nexport type NewPasswordData = {\n  password: string;\n  resetPasswordToken: string | undefined;\n};\n","import { PasswordRestoreData } from 'api/authApi';\n\nexport const passwordRestoreMessage = (email: string): PasswordRestoreData => {\n  const targetLink = `https://vadzimka0.github.io/cards-team/#/enter-new-password/$token$`; // deploy\n\n  return {\n    email,\n    from: 'cards-admin <wadik.nhl@gmail.com>',\n    message: `<div style=\"background-color: lightcyan; padding: 15px\">\n                  Password recovery link: \n                  <a href='${targetLink}'>link</a>\n              </div>\n              `,\n  };\n};\n","import { authAPI, LoginData, RegistrationData, UsersInfoResponse } from 'api/authApi';\nimport { passwordRestoreMessage } from 'pages/authPages/passwordRecovery/passwordRestoreMessage';\nimport { AppDispatch } from 'store/store';\n\nconst initState = {\n  isRegisterSuccess: false,\n  isLoggedIn: false,\n  userInfo: null,\n  restoreEmail: '',\n  isEmailSent: false,\n  isPasswordChanged: false,\n};\n\nexport const authReducer = (\n  state: InitStateType = initState,\n  action: ActionsTypes,\n): InitStateType => {\n  switch (action.type) {\n    case 'AUTH/SET_REGISTER_SUCCESS':\n    case 'AUTH/SET_USER_INFO':\n    case 'AUTH/SET_IS_LOGGED_IN':\n    case 'AUTH/SET_RESTORE_EMAIL':\n    case 'AUTH/SET_IS_EMAIL_SENT':\n    case 'AUTH/SET_IS_PASSWORD_CHANGED':\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\n// action creators\nexport const setRegistrationSuccess = (isRegisterSuccess: boolean) =>\n  ({\n    type: 'AUTH/SET_REGISTER_SUCCESS',\n    payload: { isRegisterSuccess },\n  } as const);\n\nexport const setUsersInfo = (userInfo: UsersInfoResponse) =>\n  ({\n    type: 'AUTH/SET_USER_INFO',\n    payload: { userInfo },\n  } as const);\n\nexport const setIsLoggedIn = (isLoggedIn: boolean) =>\n  ({\n    type: 'AUTH/SET_IS_LOGGED_IN',\n    payload: { isLoggedIn },\n  } as const);\nexport const setRestoreEmail = (restoreEmail: string) =>\n  ({\n    type: 'AUTH/SET_RESTORE_EMAIL',\n    payload: { restoreEmail },\n  } as const);\nexport const setIsEmailSent = (isEmailSent: boolean) =>\n  ({\n    type: 'AUTH/SET_IS_EMAIL_SENT',\n    payload: { isEmailSent },\n  } as const);\nexport const setIsPasswordChanged = (isPasswordChanged: boolean) =>\n  ({\n    type: 'AUTH/SET_IS_PASSWORD_CHANGED',\n    payload: { isPasswordChanged },\n  } as const);\n\n// thunk creators\nexport const registration =\n  (registrationsData: RegistrationData) => async (dispatch: AppDispatch) => {\n    try {\n      // dispatch(setAppIsLoading(true));\n      await authAPI.registration(registrationsData);\n      dispatch(setRegistrationSuccess(true));\n      // dispatch(setAppInfo(`Successful! Now you can login!`));\n    } catch (e) {\n      // errorsHandler(e, dispatch);\n    } finally {\n      dispatch(setRegistrationSuccess(false));\n      // dispatch(setAppIsLoading(false));\n    }\n  };\n\nexport const login = (loginData: LoginData) => async (dispatch: AppDispatch) => {\n  try {\n    // dispatch(setAppIsLoading(true));\n    const response = await authAPI.login(loginData);\n    dispatch(setUsersInfo(response.data));\n    dispatch(setIsLoggedIn(true));\n    // dispatch(setAppInfo(`Successful login, ${response.data.name}`));\n  } catch (e) {\n    // errorsHandler(e, dispatch);\n  } finally {\n    // dispatch(setAppIsLoading(false));\n  }\n};\n\nexport const restoreThroughEmail = (email: string) => async (dispatch: AppDispatch) => {\n  try {\n    await authAPI.passwordRestore(passwordRestoreMessage(email));\n    dispatch(setIsEmailSent(true));\n    dispatch(setRestoreEmail(email));\n  } catch (e) {\n    // dispatch(setError('Email not found!'));\n  } finally {\n    dispatch(setIsEmailSent(false));\n    // dispatch(setIsLoading(false));\n  }\n};\n\nexport const createNewPassword =\n  (password: string, resetPasswordToken: string | undefined) =>\n  async (dispatch: AppDispatch) => {\n    try {\n      await authAPI.newPassword({ password, resetPasswordToken });\n      dispatch(setIsPasswordChanged(true));\n    } catch (e) {\n      // dispatch(setError('Error! Please try again.'));\n    } finally {\n      dispatch(setIsPasswordChanged(false));\n      // dispatch(setIsLoading(false));\n    }\n  };\n\n// types\nexport type InitStateType = {\n  isRegisterSuccess: boolean;\n  isLoggedIn: boolean;\n  userInfo: null | UsersInfoResponse;\n  restoreEmail: string;\n  isEmailSent: boolean;\n  isPasswordChanged: boolean;\n};\n\ntype ActionsTypes =\n  | ReturnType<typeof setRegistrationSuccess>\n  | ReturnType<typeof setIsLoggedIn>\n  | ReturnType<typeof setUsersInfo>\n  | ReturnType<typeof setRestoreEmail>\n  | ReturnType<typeof setIsEmailSent>\n  | ReturnType<typeof setIsPasswordChanged>;\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { login } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const LogIn = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.auth.isLoggedIn);\n\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    rememberMe: false,\n  });\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    dispatch(login({ ...values }));\n  };\n\n  if (isLoggedIn) return <Navigate to={PATHS.PROFILE} />;\n\n  return (\n    <div>\n      <h3 className={styles.title}>Sign In</h3>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"loginEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"loginEmail\"\n            type=\"email\"\n            value={values.email}\n            onChange={e => setValues({ ...values, email: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"loginPassword\">\n          <div>Password:</div>\n          <input\n            id=\"loginPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.password}\n            onChange={e => setValues({ ...values, password: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"loginRememberMe\">\n          <input\n            id=\"loginRememberMe\"\n            type=\"checkbox\"\n            checked={values.rememberMe}\n            onChange={e => setValues({ ...values, rememberMe: e.currentTarget.checked })}\n          />\n          <span>remember me</span>\n        </label>\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className={styles.info}>\n        <NavLink className={styles.link} to={PATHS.PASSWORD_RECOVERY}>\n          Forgot Password\n        </NavLink>\n        <div>Don’t have an account?</div>\n        <NavLink className={styles.link} to={PATHS.SIGN_UP}>\n          Sign Up\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, useParams } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { createNewPassword } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const NewPassword = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const changingPasswordSuccess = useSelector<AppStoreType, boolean>(\n    state => state.auth.isPasswordChanged,\n  );\n\n  const params = useParams();\n\n  const [password, setPassword] = useState<string>('');\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    dispatch(createNewPassword(password, params.token));\n  };\n\n  if (changingPasswordSuccess) return <Navigate to={PATHS.LOGIN} />;\n\n  return (\n    <div>\n      <h3 className={styles.title}>\n        Create\n        <br /> new password\n      </h3>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"newPassword\">\n          <div>Password:</div>\n          <input\n            id=\"newPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={password}\n            onChange={e => setPassword(e.currentTarget.value)}\n          />\n        </label>\n        <p>\n          Create new password and we will\n          <br /> send you further instructions to email\n        </p>\n        <button type=\"submit\">Create new password</button>\n      </form>\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { restoreThroughEmail } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const PasswordRecovery = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isEmailSent = useSelector<AppStoreType, boolean>(state => state.auth.isEmailSent);\n\n  const [email, setEmail] = useState<string>('');\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    dispatch(restoreThroughEmail(email));\n  };\n\n  if (isEmailSent) return <Navigate to={PATHS.CHECK_EMAIL} />;\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Forgot your\n        <br />\n        password?\n      </h4>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"restoreEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"restoreEmail\"\n            type=\"email\"\n            value={email}\n            onChange={e => setEmail(e.currentTarget.value)}\n          />\n        </label>\n        <div>\n          Enter your email address and\n          <br />\n          we will send you further instructions\n        </div>\n        <button type=\"submit\">Create new password</button>\n      </form>\n      <div className={styles.info}>\n        <div>Did you remember your password?</div>\n        <NavLink className={styles.link} to={PATHS.LOGIN}>\n          Try logging in\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { registration } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const SignUp = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isRegisterSuccess = useSelector<AppStoreType, boolean>(\n    state => state.auth.isRegisterSuccess,\n  );\n\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    if (values.password === values.confirmPassword) {\n      dispatch(registration({ email: values.email, password: values.password }));\n      // : dispatch(setAppError('CHECK YOUR PASSWORDS!'));\n    }\n  };\n\n  if (isRegisterSuccess) return <Navigate to={PATHS.LOGIN} />;\n\n  return (\n    <div>\n      <h3 className={styles.title}>Sign Up</h3>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"registerEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"registerEmail\"\n            type=\"email\"\n            value={values.email}\n            onChange={e => setValues({ ...values, email: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"registerPassword\">\n          <div>Password:</div>\n          <input\n            id=\"registerPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.password}\n            onChange={e => setValues({ ...values, password: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"registerConfirmPassword\">\n          <div>Confirm Password:</div>\n          <input\n            id=\"registerConfirmPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.confirmPassword}\n            onChange={e =>\n              setValues({ ...values, confirmPassword: e.currentTarget.value })\n            }\n          />\n        </label>\n        <button type=\"submit\">Register</button>\n      </form>\n      <div className={styles.info}>\n        <div>Already have an account?</div>\n        <NavLink className={styles.link} to={PATHS.LOGIN}>\n          Sign In\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import styles from './ErrorPage.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const ErrorPage = (): ReturnComponentType => (\n  <div className={styles.error}>\n    <div className={styles.emoji}> 😞 </div>\n    <div>Error 404</div>\n    <p>This page is not exist</p>\n  </div>\n);\n","import { ReturnComponentType } from 'types';\n\nexport const DoubleRange = (): ReturnComponentType => (\n  // const dispatch = useDispatch();\n\n  <div>\n    Double Range Analogue\n    <input type=\"number\" min=\"0\" />\n    <input type=\"number\" min=\"10\" />\n  </div>\n);\n","import { ReturnComponentType } from '../../../types';\n\nexport const Pagination = (): ReturnComponentType => <div>Pagination</div>;\n","import { ReturnComponentType } from 'types';\n\nexport const Search = (): ReturnComponentType => (\n  /*  const dispatch = useDispatch();\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(searchAC(e.currentTarget.value));\n    console.log(e.currentTarget.value);\n  }; */\n  <div>\n    Search\n    <input type=\"text\" />\n  </div>\n);\n","import { ReturnComponentType } from 'types';\n\nexport const Sort = (): ReturnComponentType => (\n  // const dispatch = useDispatch();\n  <div>\n    <button type=\"button\">⬇️</button>\n    <button type=\"button\">⬆️</button>\n  </div>\n);\n","import { ReturnComponentType } from '../../../types';\n\nexport const Table = (): ReturnComponentType => <div>Table</div>;\n","import { DoubleRange, Pagination, Search, Sort, Table } from './index';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Packs = (): ReturnComponentType => (\n  <div>\n    <div>\n      <Search />\n    </div>\n    <div>\n      <DoubleRange />\n    </div>\n    <div>\n      <Sort />\n    </div>\n    <div>\n      <Table />\n    </div>\n    <div>\n      <Pagination />\n    </div>\n  </div>\n);\n","import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { UsersInfoResponse } from 'api/authApi';\nimport { PATHS } from 'enums';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  const userInfo = useSelector<AppStoreType, null | UsersInfoResponse>(\n    state => state.auth.userInfo,\n  );\n  const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.auth.isLoggedIn);\n\n  if (!isLoggedIn) return <Navigate to={PATHS.LOGIN} />;\n\n  return (\n    <div>\n      <div>Email: {userInfo && userInfo.email}</div>\n      <div>Name: {userInfo && userInfo.name}</div>\n    </div>\n  );\n};\n","import styles from 'pages/testPage/TestPage.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const TestPage = (): ReturnComponentType => (\n  <div className={styles.elements}>\n    <>Some Button</>\n    <>Some Text</>\n  </div>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport {\n  CheckEmail,\n  ErrorPage,\n  LogIn,\n  NewPassword,\n  Packs,\n  PasswordRecovery,\n  Profile,\n  SignUp,\n} from 'pages';\nimport { TestPage } from 'pages/testPage/TestPage';\nimport { ReturnComponentType } from 'types';\n\nexport const AppRoutes = (): ReturnComponentType => (\n  <Routes>\n    <Route path={PATHS.HOME} element={<Profile />} />\n    <Route path={PATHS.PROFILE} element={<Profile />} />\n    <Route path={PATHS.PACKS} element={<Packs />} />\n    <Route path={PATHS.LOGIN} element={<LogIn />} />\n    <Route path={PATHS.SIGN_UP} element={<SignUp />} />\n    <Route path={PATHS.PASSWORD_RECOVERY} element={<PasswordRecovery />} />\n    <Route path={PATHS.CHECK_EMAIL} element={<CheckEmail />} />\n    <Route path={PATHS.NEW_PASSWORD} element={<NewPassword />} />\n    <Route path={PATHS.NEW_PASSWORD_WITH_TOKEN} element={<NewPassword />} />\n    <Route path={PATHS.ERROR} element={<ErrorPage />} />\n    <Route path={PATHS.TEST_PAGE} element={<TestPage />} />\n\n    <Route path=\"*\" element={<Navigate to={PATHS.ERROR} />} />\n  </Routes>\n);\n","import { NavLink } from 'react-router-dom';\n\nimport styles from './Navbar.module.css';\n\nimport { PATHS } from 'enums';\nimport { ReturnComponentType } from 'types';\n\nexport const Navbar = (): ReturnComponentType => (\n  <header className={styles.navbar}>\n    <NavLink\n      to={PATHS.PROFILE}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Profile\n    </NavLink>\n    <NavLink\n      to={PATHS.SIGN_UP}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Sign Up\n    </NavLink>\n    <NavLink\n      to={PATHS.LOGIN}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Log In\n    </NavLink>\n    <NavLink\n      to={PATHS.PASSWORD_RECOVERY}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Password Rec\n    </NavLink>\n    <NavLink\n      to={PATHS.NEW_PASSWORD}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      New Pass\n    </NavLink>\n    {/* <NavLink to={PATHS.ERROR}>404</NavLink> */}\n    {/* <NavLink to={PATHS.TEST_PAGE}>Test</NavLink> */}\n\n    {}\n  </header>\n);\n","import { HashRouter } from 'react-router-dom';\n\nimport { AppRoutes } from './AppRoutes';\n\nimport { Navbar } from 'components/navbar/Navbar';\nimport { ReturnComponentType } from 'types';\n\nexport const App = (): ReturnComponentType => (\n  <>\n    <HashRouter>\n      <Navbar />\n      <main>\n        <AppRoutes />\n      </main>\n    </HashRouter>\n  </>\n);\n","const initState = {\n  isLoading: false,\n  isInitialized: false,\n  error: '',\n  info: '',\n};\n\nexport type InitStateType = typeof initState;\n\nexport const appReducer = (\n  state: InitStateType = initState,\n  action: ActionsTypes,\n): InitStateType => {\n  switch (action.type) {\n    case 'APP/SET': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const authAC = (isAuth: boolean) =>\n  ({\n    type: 'APP/SET',\n    isAuth,\n  } as const);\n\ntype ActionsTypes = ReturnType<typeof authAC>;\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { appReducer, authReducer } from './reducers';\n\nconst reducers = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store: Store<AppStoreType> = createStore(\n  reducers,\n  applyMiddleware(thunkMiddleware),\n);\n\nexport type AppStoreType = ReturnType<typeof reducers>;\nexport type AppDispatch = typeof store.dispatch;\n\n// @ts-ignore\nwindow.store = store; // for dev\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport { App } from 'app/App';\nimport { store } from 'store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\nexport {};\n"],"sourceRoot":""}