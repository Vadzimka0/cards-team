{"version":3,"sources":["components/navbar/Navbar.module.css","pages/errorPage/ErrorPage.module.css","pages/testPage/TestPage.module.css","pages/authPages/signUp/SignUp.module.css","enums/paths/index.ts","reportWebVitals.ts","api/axiosInstance.ts","api/authApi.ts","pages/authPages/passwordRecovery/passwordRestoreMessage.ts","store/reducers/authReducer.ts","pages/authPages/logIn/LogIn.tsx","pages/authPages/newPassword/NewPassword.tsx","pages/authPages/passwordRecovery/PasswordRecovery.tsx","pages/authPages/signUp/SignUp.tsx","pages/errorPage/ErrorPage.tsx","pages/packs/DoubleRange/DoubleRange.tsx","pages/packs/Pagination/Pagination.tsx","pages/packs/Search/Search.tsx","pages/packs/Sort/Sort.tsx","pages/packs/Table/Table.tsx","pages/packs/Packs.tsx","pages/profile/Profile.tsx","pages/testPage/TestPage.tsx","app/AppRoutes.tsx","components/navbar/Navbar.tsx","app/App.tsx","store/reducers/appReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","PATHS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","process","withCredentials","authAPI","payload","post","data","passwordRestoreMessage","email","from","message","initState","isRegisterSuccess","isLoggedIn","userInfo","restoreEmail","isEmailSent","setRegistrationSuccess","type","setIsEmailSent","LogIn","dispatch","useDispatch","useSelector","state","auth","useState","password","rememberMe","values","setValues","to","PROFILE","className","styles","title","onSubmit","e","loginData","preventDefault","a","response","form","htmlFor","id","value","onChange","currentTarget","autoComplete","checked","info","link","PASSWORD_RECOVERY","SIGN_UP","NewPassword","PasswordRecovery","setEmail","restoreThroughEmail","LOGIN","SignUp","confirmPassword","registrationsData","ErrorPage","error","emoji","DoubleRange","min","Pagination","Search","Sort","Table","Packs","Profile","name","TestPage","elements","AppRoutes","path","HOME","element","PACKS","NEW_PASSWORD","ERROR","TEST_PAGE","Navbar","navbar","isActive","active","App","isLoading","isInitialized","reducers","combineReducers","app","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca776832.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__UjdbE\",\"active\":\"Navbar_active__1NE7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ErrorPage_error__2qfsS\",\"emoji\":\"ErrorPage_emoji__3NBoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elements\":\"TestPage_elements__2HAji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SignUp_title__1Ph07\",\"form\":\"SignUp_form__t8X5o\",\"info\":\"SignUp_info__NtZEq\",\"link\":\"SignUp_link__oxnWG\"};","export enum PATHS {\n  HOME = '/',\n  PROFILE = '/profile',\n  PACKS = '/packs',\n  LOGIN = '/login',\n  SIGN_UP = '/signup',\n  PASSWORD_RECOVERY = '/password-recovery',\n  NEW_PASSWORD = '/enter-new-password',\n  TEST_PAGE = '/super-components',\n  ERROR = '/404',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nexport const developmentMode = false;\n\nexport const instance = axios.create({\n  baseURL: developmentMode\n    ? process.env.REACT_APP_DEVELOPMENT_MODE_BASE_URL\n    : process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './axiosInstance';\n\nexport const authAPI = {\n  registration: (payload: RegistrationData) =>\n    instance.post<RegistrationData, AxiosResponse<{ error?: string }>>(\n      '/auth/register',\n      payload,\n    ),\n  login: (payload: LoginData) =>\n    instance.post<LoginData, AxiosResponse<UsersInfoResponse>>('/auth/login', payload),\n  passwordRestore: (data: PasswordRestoreData) =>\n    instance.post<PasswordRestoreData, AxiosResponse<PasswordResponse>>(\n      'auth/forgot',\n      data,\n    ),\n};\n\nexport type RegistrationData = {\n  email: string;\n  password: string;\n};\nexport type LoginData = RegistrationData & { rememberMe: boolean };\nexport type UsersInfoResponse = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number;\n};\nexport type PasswordRestoreData = {\n  email: string;\n  from: string;\n  message: string;\n};\nexport type PasswordResponse = {\n  info: string;\n  error: string;\n};\n","import { PasswordRestoreData } from 'api/authApi';\n\nexport const passwordRestoreMessage = (email: string): PasswordRestoreData => {\n  const targetLink = `https://vadzimka0.github.io/cards-team/#/enter-new-password/$token$`; // deploy\n\n  return {\n    email,\n    from: 'cards-admin <wadik.nhl@gmail.com>',\n    message: `<div style=\"background-color: lightcyan; padding: 15px\">\n                  Password recovery link: \n                  <a href='${targetLink}'>link</a>\n              </div>\n              `,\n  };\n};\n","import { authAPI, LoginData, RegistrationData, UsersInfoResponse } from 'api/authApi';\nimport { passwordRestoreMessage } from 'pages/authPages/passwordRecovery/passwordRestoreMessage';\nimport { AppDispatch } from 'store/store';\n\nconst initState = {\n  isRegisterSuccess: false,\n  isLoggedIn: false,\n  userInfo: null,\n  restoreEmail: '',\n  isEmailSent: false,\n};\n\nexport const authReducer = (\n  state: InitStateType = initState,\n  action: ActionsTypes,\n): InitStateType => {\n  switch (action.type) {\n    case 'AUTH/SET_REGISTER_SUCCESS':\n    case 'AUTH/SET_USER_INFO':\n    case 'AUTH/SET_IS_LOGGED_IN':\n    case 'auth/SET_RESTORE_EMAIL':\n    case 'auth/SET_IS_EMAIL_SENT':\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\n// action creators\nexport const setRegistrationSuccess = (isRegisterSuccess: boolean) =>\n  ({\n    type: 'AUTH/SET_REGISTER_SUCCESS',\n    payload: { isRegisterSuccess },\n  } as const);\n\nexport const setUsersInfo = (userInfo: UsersInfoResponse) =>\n  ({\n    type: 'AUTH/SET_USER_INFO',\n    payload: { userInfo },\n  } as const);\n\nexport const setIsLoggedIn = (isLoggedIn: boolean) =>\n  ({\n    type: 'AUTH/SET_IS_LOGGED_IN',\n    payload: { isLoggedIn },\n  } as const);\nexport const setRestoreEmail = (restoreEmail: string) =>\n  ({\n    type: 'auth/SET_RESTORE_EMAIL',\n    payload: { restoreEmail },\n  } as const);\nexport const setIsEmailSent = (isEmailSent: boolean) =>\n  ({\n    type: 'auth/SET_IS_EMAIL_SENT',\n    payload: { isEmailSent },\n  } as const);\n\n// thunk creators\nexport const registration =\n  (registrationsData: RegistrationData) => async (dispatch: AppDispatch) => {\n    try {\n      // dispatch(setAppIsLoading(true));\n      await authAPI.registration(registrationsData);\n      dispatch(setRegistrationSuccess(true));\n      // dispatch(setAppInfo(`Successful! Now you can login!`));\n    } catch (e) {\n      // errorsHandler(e, dispatch);\n    } finally {\n      dispatch(setRegistrationSuccess(false));\n      // dispatch(setAppIsLoading(false));\n    }\n  };\n\nexport const login = (loginData: LoginData) => async (dispatch: AppDispatch) => {\n  try {\n    // dispatch(setAppIsLoading(true));\n    const response = await authAPI.login(loginData);\n    dispatch(setUsersInfo(response.data));\n    dispatch(setIsLoggedIn(true));\n    // dispatch(setAppInfo(`Successful login, ${response.data.name}`));\n  } catch (e) {\n    // errorsHandler(e, dispatch);\n  } finally {\n    // dispatch(setAppIsLoading(false));\n  }\n};\n\nexport const restoreThroughEmail = (email: string) => async (dispatch: AppDispatch) => {\n  try {\n    await authAPI.passwordRestore(passwordRestoreMessage(email));\n    dispatch(setIsEmailSent(true));\n    dispatch(setRestoreEmail(email));\n  } catch (e) {\n    // dispatch(setError('Email not found!'));\n  } finally {\n    dispatch(setIsEmailSent(false));\n    // dispatch(setIsLoading(false));\n  }\n};\n\n// types\nexport type InitStateType = {\n  isRegisterSuccess: boolean;\n  isLoggedIn: boolean;\n  userInfo: null | UsersInfoResponse;\n  restoreEmail: string;\n  isEmailSent: boolean;\n};\n\ntype ActionsTypes =\n  | ReturnType<typeof setRegistrationSuccess>\n  | ReturnType<typeof setIsLoggedIn>\n  | ReturnType<typeof setUsersInfo>\n  | ReturnType<typeof setRestoreEmail>\n  | ReturnType<typeof setIsEmailSent>;\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { login } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const LogIn = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.auth.isLoggedIn);\n\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    rememberMe: false,\n  });\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    dispatch(login({ ...values }));\n  };\n\n  if (isLoggedIn) return <Navigate to={PATHS.PROFILE} />;\n\n  return (\n    <div>\n      <h3 className={styles.title}>Sign In</h3>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"loginEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"loginEmail\"\n            type=\"email\"\n            value={values.email}\n            onChange={e => setValues({ ...values, email: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"loginPassword\">\n          <div>Password:</div>\n          <input\n            id=\"loginPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.password}\n            onChange={e => setValues({ ...values, password: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"loginRememberMe\">\n          <input\n            id=\"loginRememberMe\"\n            type=\"checkbox\"\n            checked={values.rememberMe}\n            onChange={e => setValues({ ...values, rememberMe: e.currentTarget.checked })}\n          />\n          <span>remember me</span>\n        </label>\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className={styles.info}>\n        <NavLink className={styles.link} to={PATHS.PASSWORD_RECOVERY}>\n          Forgot Password\n        </NavLink>\n        <div>Don’t have an account?</div>\n        <NavLink className={styles.link} to={PATHS.SIGN_UP}>\n          Sign Up\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import { ReturnComponentType } from 'types';\n\nexport const NewPassword = (): ReturnComponentType => null;\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { restoreThroughEmail } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const PasswordRecovery = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isEmailSent = useSelector<AppStoreType, boolean>(state => state.auth.isEmailSent);\n\n  const [email, setEmail] = useState<string>('');\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    dispatch(restoreThroughEmail(email));\n  };\n\n  if (isEmailSent) return <Navigate to={PATHS.PROFILE} />;\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Forgot your\n        <br />\n        password?\n      </h4>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"restoreEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"restoreEmail\"\n            type=\"email\"\n            value={email}\n            onChange={e => setEmail(e.currentTarget.value)}\n          />\n        </label>\n        <div>\n          Enter your email address and\n          <br />\n          we will send you further instructions\n        </div>\n        <button type=\"submit\">Create new password</button>\n      </form>\n      <div className={styles.info}>\n        <div>Did you remember your password?</div>\n        <NavLink className={styles.link} to={PATHS.LOGIN}>\n          Try logging in\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport styles from 'pages/authPages/signUp/SignUp.module.css';\nimport { registration } from 'store/reducers/authReducer';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const SignUp = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const isRegisterSuccess = useSelector<AppStoreType, boolean>(\n    state => state.auth.isRegisterSuccess,\n  );\n\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const handleFormSubmit = (e: FormEvent): void => {\n    e.preventDefault();\n    if (values.password === values.confirmPassword) {\n      dispatch(registration({ email: values.email, password: values.password }));\n      // : dispatch(setAppError('CHECK YOUR PASSWORDS!'));\n    }\n  };\n\n  if (isRegisterSuccess) return <Navigate to={PATHS.LOGIN} />;\n\n  return (\n    <div>\n      <h3 className={styles.title}>Sign Up</h3>\n\n      <form onSubmit={handleFormSubmit} className={styles.form}>\n        <label htmlFor=\"registerEmail\">\n          <div>E-mail:</div>\n          <input\n            id=\"registerEmail\"\n            type=\"email\"\n            value={values.email}\n            onChange={e => setValues({ ...values, email: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"registerPassword\">\n          <div>Password:</div>\n          <input\n            id=\"registerPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.password}\n            onChange={e => setValues({ ...values, password: e.currentTarget.value })}\n          />\n        </label>\n        <label htmlFor=\"registerConfirmPassword\">\n          <div>Confirm Password:</div>\n          <input\n            id=\"registerConfirmPassword\"\n            type=\"password\"\n            autoComplete=\"on\"\n            value={values.confirmPassword}\n            onChange={e =>\n              setValues({ ...values, confirmPassword: e.currentTarget.value })\n            }\n          />\n        </label>\n        <button type=\"submit\">Register</button>\n      </form>\n      <div className={styles.info}>\n        <div>Already have an account?</div>\n        <NavLink className={styles.link} to={PATHS.LOGIN}>\n          Sign In\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n","import styles from './ErrorPage.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const ErrorPage = (): ReturnComponentType => (\n  <div className={styles.error}>\n    <div className={styles.emoji}> 😞 </div>\n    <div>Error 404</div>\n    <p>This page is not exist</p>\n  </div>\n);\n","import { ReturnComponentType } from 'types';\n\nexport const DoubleRange = (): ReturnComponentType => (\n  // const dispatch = useDispatch();\n\n  <div>\n    Double Range Analogue\n    <input type=\"number\" min=\"0\" />\n    <input type=\"number\" min=\"10\" />\n  </div>\n);\n","import { ReturnComponentType } from '../../../types';\n\nexport const Pagination = (): ReturnComponentType => <div>Pagination</div>;\n","import { ReturnComponentType } from 'types';\n\nexport const Search = (): ReturnComponentType => (\n  /*  const dispatch = useDispatch();\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(searchAC(e.currentTarget.value));\n    console.log(e.currentTarget.value);\n  }; */\n  <div>\n    Search\n    <input type=\"text\" />\n  </div>\n);\n","import { ReturnComponentType } from 'types';\n\nexport const Sort = (): ReturnComponentType => (\n  // const dispatch = useDispatch();\n  <div>\n    <button type=\"button\">⬇️</button>\n    <button type=\"button\">⬆️</button>\n  </div>\n);\n","import { ReturnComponentType } from '../../../types';\n\nexport const Table = (): ReturnComponentType => <div>Table</div>;\n","import { DoubleRange, Pagination, Search, Sort, Table } from './index';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Packs = (): ReturnComponentType => (\n  <div>\n    <div>\n      <Search />\n    </div>\n    <div>\n      <DoubleRange />\n    </div>\n    <div>\n      <Sort />\n    </div>\n    <div>\n      <Table />\n    </div>\n    <div>\n      <Pagination />\n    </div>\n  </div>\n);\n","import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { UsersInfoResponse } from 'api/authApi';\nimport { PATHS } from 'enums';\nimport { AppStoreType } from 'store/store';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  const userInfo = useSelector<AppStoreType, null | UsersInfoResponse>(\n    state => state.auth.userInfo,\n  );\n  const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.auth.isLoggedIn);\n\n  if (!isLoggedIn) return <Navigate to={PATHS.LOGIN} />;\n\n  return (\n    <div>\n      <div>Email: {userInfo && userInfo.email}</div>\n      <div>Name: {userInfo && userInfo.name}</div>\n    </div>\n  );\n};\n","import styles from 'pages/testPage/TestPage.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const TestPage = (): ReturnComponentType => (\n  <div className={styles.elements}>\n    <>Some Button</>\n    <>Some Text</>\n  </div>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { PATHS } from 'enums';\nimport {\n  ErrorPage,\n  LogIn,\n  NewPassword,\n  Packs,\n  PasswordRecovery,\n  Profile,\n  SignUp,\n} from 'pages';\nimport { TestPage } from 'pages/testPage/TestPage';\nimport { ReturnComponentType } from 'types';\n\nexport const AppRoutes = (): ReturnComponentType => (\n  <Routes>\n    <Route path={PATHS.HOME} element={<Profile />} />\n    <Route path={PATHS.PROFILE} element={<Profile />} />\n    <Route path={PATHS.PACKS} element={<Packs />} />\n    <Route path={PATHS.LOGIN} element={<LogIn />} />\n    <Route path={PATHS.SIGN_UP} element={<SignUp />} />\n    <Route path={PATHS.PASSWORD_RECOVERY} element={<PasswordRecovery />} />\n    <Route path={PATHS.NEW_PASSWORD} element={<NewPassword />} />\n    <Route path={PATHS.ERROR} element={<ErrorPage />} />\n    <Route path={PATHS.TEST_PAGE} element={<TestPage />} />\n\n    <Route path=\"*\" element={<Navigate to={PATHS.ERROR} />} />\n  </Routes>\n);\n","import { NavLink } from 'react-router-dom';\n\nimport styles from './Navbar.module.css';\n\nimport { PATHS } from 'enums';\nimport { ReturnComponentType } from 'types';\n\nexport const Navbar = (): ReturnComponentType => (\n  <header className={styles.navbar}>\n    <NavLink\n      to={PATHS.PROFILE}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Profile\n    </NavLink>\n    <NavLink\n      to={PATHS.SIGN_UP}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Sign Up\n    </NavLink>\n    <NavLink\n      to={PATHS.LOGIN}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Log In\n    </NavLink>\n    <NavLink\n      to={PATHS.PASSWORD_RECOVERY}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      Password Rec\n    </NavLink>\n    <NavLink\n      to={PATHS.NEW_PASSWORD}\n      className={({ isActive }) => (isActive ? styles.active : '')}\n    >\n      New Pass\n    </NavLink>\n    {/* <NavLink to={PATHS.ERROR}>404</NavLink> */}\n    {/* <NavLink to={PATHS.TEST_PAGE}>Test</NavLink> */}\n\n    {}\n  </header>\n);\n","import { HashRouter } from 'react-router-dom';\n\nimport { AppRoutes } from './AppRoutes';\n\nimport { Navbar } from 'components/navbar/Navbar';\nimport { ReturnComponentType } from 'types';\n\nexport const App = (): ReturnComponentType => (\n  <>\n    <HashRouter>\n      <Navbar />\n      <main>\n        <AppRoutes />\n      </main>\n    </HashRouter>\n  </>\n);\n","const initState = {\n  isLoading: false,\n  isInitialized: false,\n  error: '',\n  info: '',\n};\n\nexport type InitStateType = typeof initState;\n\nexport const appReducer = (\n  state: InitStateType = initState,\n  action: ActionsTypes,\n): InitStateType => {\n  switch (action.type) {\n    case 'APP/SET': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const authAC = (isAuth: boolean) =>\n  ({\n    type: 'APP/SET',\n    isAuth,\n  } as const);\n\ntype ActionsTypes = ReturnType<typeof authAC>;\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { appReducer, authReducer } from './reducers';\n\nconst reducers = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store: Store<AppStoreType> = createStore(\n  reducers,\n  applyMiddleware(thunkMiddleware),\n);\n\nexport type AppStoreType = ReturnType<typeof reducers>;\nexport type AppDispatch = typeof store.dispatch;\n\n// @ts-ignore\nwindow.store = store; // for dev\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport { App } from 'app/App';\nimport { store } from 'store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\nexport {};\n"],"sourceRoot":""}